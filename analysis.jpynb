import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objs as go  
from sklearn.cluster import KMeans
from sklearn.preprocessing import LabelEncoder
from sklearn import metrics
import scikitplot as skplt

# Reading the dataset
onlineshoppers_dataset = pd.read_csv('dataset.csv')

# Checking the dataset for missing values
missing = onlineshoppers_dataset.isnull().sum()
print(missing)

# Filling missing values with 0
onlineshoppers_dataset.fillna(0, inplace=True)

# Selecting ProductRelated and BounceRates columns (index 5 and 6)
x = onlineshoppers_dataset.iloc[:, [5, 6]].values
print(x.shape)

# Elbow method to determine the number of clusters
cg = []

for i in range(1, 11):  # Range goes from 1 to 10 (11 is excluded)
    km = KMeans(
        n_clusters=i,
        init='k-means++',
        max_iter=200,
        n_init=10,
        random_state=0,
        algorithm='full',
        tol=0.001
    )
    km.fit(x)
    cg.append(km.inertia_)

# Plotting the elbow curve
plt.rcParams['figure.figsize'] = (13, 7)
plt.plot(range(1, 11), cg)
plt.grid()
plt.tight_layout()
plt.title('The Elbow Method', fontsize=15)
plt.xlabel('Cluster K')  # Removed comma
plt.ylabel('Inertia')
plt.show()

# Clustering with 2 clusters using KMeans
km = KMeans(n_clusters=2, init='k-means++', max_iter=300, n_init=10, random_state=0)
y_means = km.fit_predict(x)

# Plotting the clusters
plt.scatter(x[y_means == 0, 0], x[y_means == 0, 1], s=50, c='yellow', label='Uninterested Customers')
plt.scatter(x[y_means == 1, 0], x[y_means == 1, 1], s=50, c='pink', label='Target Customers')

# Plotting the centroids
plt.scatter(km.cluster_centers_[:, 0], km.cluster_centers_[:, 1], s=200, c='blue', marker='X', label='Centroids')

# Adding titles, labels, and legend
plt.title('ProductRelated Duration vs Bounce Rate', fontsize=20)
plt.grid(True)
plt.xlabel('ProductRelated Duration')
plt.ylabel('Bounce Rates')
plt.legend()
plt.show()

# Label encoding the 'Revenue' column
labels_true = le.fit_transform(onlineshoppers_dataset['Revenue'])

# Calculating the adjusted rand index
score = metrics.adjusted_rand_score(labels_true, y_means)
print("Adjusted Rand Index:", score)

# Plotting confusion matrix using scikit-plot
plt_1 = skplt.metrics.plot_confusion_matrix(labels_true, y_means, normalize=False)
plt.title("Confusion Matrix (Unnormalized)")
plt.show()

# Normalized confusion matrix
plt_2 = skplt.metrics.plot_confusion_matrix(labels_true, y_means, normalize=True)
plt.title("Confusion Matrix (Normalized)")
plt.show()
